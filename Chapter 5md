//Understanding the Purpose of Functions//
Explain what a function is and why functions are used in programming.

A function in programming is a block of code. It's  like a recipe. It's a set of instructions that performs a specific task when you use it.
A function is sort of like a  mini-program inside a larger program. Functions help keep your code organized and easier to understand because 
they group related tasks together in one. Functions  also make it easier to reuse code, which means we don't have to write the same thing over 
and over again. It limits the redundancy. So, whenever we need to perform a particular task, we can just call the function instead of writing 
out all the instructions again.


Describe the benefits of using functions (code reusability, modularity, abstraction).

Code Reusability: With functions you are able to write a code one time and reuse that code as many times as you desire throughout your program. 
This ultimately saves you time and reduces the chances of small errors in your code.  


Modularity: Functions help by collapsing the program into smaller parts, that essentially is easier for the program to read. Each function can be
used to solve a certain problem or perform a certain task.You are also able to collaborate with your team on different functions.This makes your code
easy to read, organized, and simple. 



//Function Syntax and Structure//
Define the key components of a function: return type, function name, parameters, function body, and return statement.
Differentiate between void and value returning functions.
Demonstrate the use of the return statement to return values from functions.
Identify function prototypes.

//Writing Basic Functions//
Create custom functions in C++ with appropriate return types and parameters to solve simple problems.

//Calling Functions//
Call functions from within other functions or the main function, passing arguments correctly.
Understand the concept of passing arguments by value.
Understand the concept of passing arguments by reference.

//Function Overloading//
Explain the concept of function overloading.
Write simple overloaded functions.

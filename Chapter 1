# Introduction to C++ Programming

## Objectives
Upon finishing this chapter, students will have the capability to:
1. Identify basic components of a C++ program, including functions, special symbols, and identifiers
2. Classify simple data types and use them in assignment statements
3. Use arithmetic operators, precedence, and expressions
4. Create assignment and input statements and the use of variables within statements.
5. Differentiate between type conversion and type casting
6. Develop output results using output statements
7. Identify syntax errors and debugging techniques
8. Write a basic C++ program

## Introduction

In this chapter, we'll learn the essential basics of C++ programming. It’s like building blocks for people 
who want to become programmers. We’ll start by understanding the main parts of a C++ program, like functions,
special symbols,and identifiers. Functions are like building blocks of code that help organize things better. Special symbols and 
identifiers are like names for things in the program, making it easier to work with data.

Next, we'll talk about data types and assignment statements in C++. This is important for keeping and changing different kinds of
information. When programmers learn how to use simple data types in assignment statements, it helps them start and change variables 
easily. We’ll also look at math symbols, their importance, and how to create complicated math calculations in C++ programs.

Now, we'll look at how to produce input and output to users. Dealing with what users type and arranging how information is displayed 
are essential skills for making programs that are easy for people to use. We also talk about changing the data type and casting it, 
understanding when and why to do it to keep data accurate. Finally, we find and fix common mistakes in how the program is written 
and explore ways to ensure the program runs smoothly.

This chapter provides activities with hands-on problems that will allow readers to write their own basic C++ program to make sure 
they understand these concepts.
____________________________________________________________________________________________________________________________________________
Basic Elements

This part discusses four main things in C++: comments, reserved words, identifiers, and functions. Functions are essential in C++; 
They let programmers combine pieces of code and use them when they want. It’s like organizing code into smaller parts that can be used 
again, making it easier to understand and work with. Functions can accept arguments, do specific tasks, and give back results to the 
caller. Knowing about comments, reserved words, identifiers, and functions helps developers write good, efficient, and well-organized 
C++ code. This sets a strong base for creating advanced programs and solving complex problems as they get more experience in C++. 
We'll learn more about this in the next chapter.

Reserved Words (Keywords)

Reserved words, also called keywords, are certain words with set meanings in C++. They are the foundation for making instructions,
expressions, and structures in a program. Because they’re reserved for specific jobs, programmers can’t use them as names for things 
like variables or functions in their code. Knowing these reserved words is vital because they shape the basic structure of C++ and 
set the rules for how the language works.
For Example :     int, float, double, bool, if, else, do, while, return, const

Comments 

Comments are critical in programming because they let programmers add notes to their code. These notes are like messages for humans, 
not for the computer. When the code is being turned into a program, the computer ignores these notes. Comments are like documentation 
or reminders for programmers to understand, keep up, and work together on projects more efficiently.

C++ has two styles of comments. The first if called an in-line comment which is done be using two foward slashes (//). Everything typed
after that is considered a comment and will be ignored by the compiler.

For Example: int age // STUDENT AGE 

From this example, "STUDENT AGE" would be considered a comment.The second type of comment is called multiple-line comment which allow 
programmers to write longer comments that can reach multiple lines. You proform this by enclosing the comment in /* and */.

For Example: 
*/
  ANY TEXT WRITTEN HERE IS A COMMENT
*/

Identifiers

In programming, identifiers are essential for defining and reaching different things in a code. In C++, an identifier is like a name 
given to parts of a program, such as variables, functions, classes, objects, labels, and custom types created by users. These names 
work as labels, letting programmers talk about and work with these parts in their code.

This part is here to help you fully grasp identifiers in C++. It covers the rules, good ways to use them, and how they make a C++ 
program organized and easy to understand.

Rules For Naming Identifiers:
-----------------------------
1) Valid Characters: Identifiers can have letters (uppercase and lowercase), numbers, and underscores (_). The first character must 
   be a letter or an underscore. C++ is case-sensitive, so "num123" and "Num123" are different.
2) Reserved Keywords: As discussed previously, certain words in C++ have predefined meanings and can't be used as identifiers.  
   Examples include "if," "else," "while," "class," "int," and "return.
3) Length Limitation: Identifiers can be any length, but only the first few characters matter. Many compilers limit the length, 
   often to 255 characters.
4) Unicode Support: C++ allows the use of Unicode characters in identifiers, expanding the range of possible names.
5) Namespace Scope: Identifiers within a namespace should have unique names to avoid conflicts. Use descriptive names that 
   reflect the content or purpose.
6) Global Scope: Be careful with identifiers in the global scope to prevent clashes in large projects. It's a good idea to use unique 
   prefixes or namespaces for global identifiers.
7) Underscore Convention: Identifiers starting with an underscore followed by a capital letter (e.g., "_MyIdentifier") and those with 
   two consecutive underscores are reserved for the compiler and standard library. Avoid using such names to prevent unintended issues.


Review questions

1. What is the role of identifiers in programming?

2. Why are comments critical in programming?

3. How many styles of comments are there?
  a) 7
  b) 1
  c) 2
  d) 4

key:

1.Functions in C++ allow programmers to organize code into reusable, 
modular units. They can accept arguments, perform specific tasks, and return results to the caller 
2. Comments in programming serve as notes for humans, providing 
documentation and reminders. They are ignored by the computer during program execution
3. d
____________________________________________________________________________________________________________________________________________


Arithmetic operators, precedence, and expressions 

Computers have the ability to calculate and with that you can use many different arithmetic operators to specify between integers and 
floating- point data types.  

There are five different types of arithmetic operators 

+ (addition) 

- (subtraction or negation) 

 * (multiplication) 

/ (division) 

 % (mod, (modulus or remainder))  

For Example:  

int    x=10  y=2  

int sum= x+y ;// sum will be 12 

int difference= x-y;// difference will be 8  

int product =x*y;// product will be 20  

int quotient =x/y;// quotient will be 5 

int remainder = x%y;// remainder will be 0  

Order of Precedence 

When more than one arithmetic operator is used in an expression, C++ uses the operator precedence rules to evaluate the expression, 
stating which step would be solved first and so forth relating to PEMDAS but in a coding way. Stated below are the order of precedence.  

 

Parenthesis  

() 

Unary (used as positive or negative signs)  

+ - 

Multiplicative  

* / % 

Additive  

+ - 

Assignment  

= 

 

When operators have the same level of precedence, the operations are performed from left to right, the use of parentheses is to group arithmetic expressions.  

Expressions  

1. Integral expressions-all operands in the expression are integers. Meaning a number that is a whole number and not a fraction. The solution will be an integer. 

2. Floating-point (decimal) expressions- all operands in the expression are floating points ( decimals numbers/ double etc..) The solution will be a floating-point. 

3. Mixed expressions-the expression contains both integers and decimal numbers.   

a. If the operator has the same type of integers or same floating-point numbers, the operator is evaluated according to the type of operands.  

b. If the operator has both types of operands meaning one integer and the other is a floating-point number then the result will be that the integer will change to a floating-point number.  

For Example: 
Integral expression: 2+ 4 * 6 

Floating-point: 2.4 * 3.4 - 10.5 

Mixed Expression: 10 + 4.7 

Review Questions: 

1. What is the operand in the following expression? 3+4

2. In C++, what arithemtic operator is used for division?
a) +
b) -
c) /
d) %

3. True/False: Arithmetic operators are evaluted from left to right?

Answers: 1. +    2.   /    3.    True
____________________________________________________________________________________________________________________________________________
Differentiate between type conversion and type casting  

Type Conversion:

There are two different types of type conversions 

Implicit: known as automatic type conversion  
Done by the complier on its own, without any external trigger from the user 
Takes place when in an expression more than one data type is present. 
All the data types are of the variables are upgraded to the data type of the variable with largest data type.  

Explicit: This process is also called type casting and its user defined. Here the user can typecast the result to make it of a particular data type.  

For Example:  
Implicit:

int main()  

{  

    int x = 10; // integer x  

    char y = 'a'; // character c  

   

    // y implicitly converted to int. ASCII  

    // value of 'a' is 97  

    x = x + y;  

   

    // x is implicitly converted to float  

    float z = x + 1.0;  

   

    cout << "x = " << x << endl  

         << "y = " << y << endl  

         << "z = " << z << endl;  

   

    return 0;  

} 

Explicit:

// C++ program to demonstrate  

// explicit type casting  

   

#include <iostream>  

using namespace std;  

   

int main()  

{  

    double x = 1.2;  

   

    // Explicit conversion from double to int  

    int sum = (int)x + 1;  

   

    cout << "Sum = " << sum;  

   

    return 0;  

} 

Type Cast 
Converting an expression of a given type into another type.  

For Example:  

int num = 5;  
float x;  
x = float(num);  
x = 5.0

Review Questions: 

1. The cast operator is also known as what?
a) type conversion
b) type casting
c) operator 

2. True/ False: When converting a floating-point number to an integer
using the castoperator, you do not drop the decimal part of the floating-point number.

3. Complete the following statement: static_cast<int>(7.9) = 

Answers 1. a&b  2.  False   3. 7
____________________________________________________________________________________________________________________________________________
Data types

In C++, data types are like basic building blocks that define what kind of information a variable can hold. They are important because they
determine how much space a variable takes up and how it behaves when the program runs. Knowing about these basic data types is really 
important for writing code that works well, can be used on different systems, and doesn't have mistakes.

Now, let's look at the main types of data that C++ provides:

1. Integer Types:
   - `int`: This holds regular whole numbers and usually takes up 4 bytes. It ranges from as small as -2 billion to as big as +2 billion.
   - `short`: Similar to `int` but smaller, using 2 bytes. It can go from about -32,768 to +32,767.
   - `long`: Like `int` but can be larger, taking 4 or 8 bytes depending on the system.
   - `long long`: Introduced later and can hold very large whole numbers, using 8 bytes.

2. Floating-Point Types: 
   - `float`: Holds numbers with decimals, using 4 bytes and having around 7 decimal digits of precision.
   - `double`: Similar to `float` but more precise, using 8 spaces and having about 15 decimal digits of precision.
   - `long double`: Even more precise than `double`.

3. Character Type: 
   - `char`: Holds a single character, like a letter or symbol, using 1 byte. It can also represent small numbers.

4. Boolean Type:
   - `bool`: Represents true or false, using 1 byte.

Strings

Now, let's talk about strings. In C++, strings are a way to store sequences of characters, like words or sentences. They are super useful
for working with text in programs. To use strings, we include a special part called `<string>` in the header of our code. We can create and 
work with string variables to handle human-readable information in our programs. string variables can be declared using various methods. 
For example:


#include <iostream>
#include <string>
using namespace std;

int main() {

    // Method 1: Using string literals
    string age = "twenty";

    // Method 2: Using the constructor
    string message("Hello, world");

    // Method 3: Using assignment
    string fruit;
    class = "freshman";

    return 0;
}

Review questions

1. What does the long double data type offer in terms of precision?

2. Which data type has a range of values of -2 billion to +2 billion
  a) long long
  b) int
  c) double
  d) short

3. What must be included to work with strings in C++?


key:

1) long double data type represents extended-precision floating-point numbers
2) b
3) To work with strings in C++, the <string> header must be included in the code.



____________________________________________________________________________________________________________________________________________
Output results using output statements
Output results are the result of running your code and asking for a result. You can tell your code to add 2 + 2 = y, without an output statment the result 4 would not be sent.

Consider the following

#include <isostream>
using namespace std;

int main()
{
  int y:
  y = 2;
return 0;
}

Without an output satement this code just stores 2 into y, so the end user does not know what is stored. Before moving on attempt to add an output statement.

The code WITH and output statment reads:
#include <isostream>
using namespace std;

int main()
{
  int y:
  y = 2;
cout << y << endl
return 0;
}
____________________________________________________________________________________________________________________________________________

Syntax Errors and Debugging Techneqiues 
Syntax errors occur because you violate the conventions of c++. Think of it like the grammar and punctuation, a sentence may make sense to you as a human but without the correct grammatical conventions it means nothing. Syntax errors can be caused by improper use of semicolons and brackets, not declaring variables correctly, forgetting quotes for strings, and many other things. 

Condsider the following code:
#include <iostream>
using namespace std;

int main()
{
double x;
int n;
    
x = 3
n = 2

  double answer = pow(x, n);

cout << answer

return 0;


This code contains several syntax errors, it is intended to take a base and an exponenet and find the result. Try to fix it before moving on.

The following must be corrected in order to run this code:

#include <iostream>
#include <cmath>   // The cmath library is required to use the "pow" function below
using namespace std;

int main()
{
  double x;
  int n;
    
  x = 3;  // Semicolons are required after each line 
  n = 2;

  double answer = pow(x, n);

  cout << answer << endl // endl is required to indicate when the code ends

return 0;
} // A bracket is required to tell the computer what its expexcted to read

The corrected code reads:

#include <iostream>
#include <cmath> 
using namespace std;

int main()
{
  double x;
  int n;
    
  x = 3;
  n = 2;

  double result = pow(x, n);

  cout << result << endl;

  return 0;
}
____________________________________________________________________________________________________________________________________________
#include <iostream>

int main(){
// Declare Variables
int a= 5;
int b= 2;
int result;

// Arithmetic Operators annd Precedence 
result = a + b * 4;

// Output result
cout << " Result: " << result << endl;

return 0;
}

In this example the Arthmetic operators is the "+" and "*" becuase they are performing operations of math. 
The precedence used in this example is " a + b * 4 " due to the fact that it has levels of operation, so " b * 4 " would take place first becuase multipilcation has higher precedence than simple addition.
In this example the expression is " 5 + 2 * 4 " because it is the blend of variables, operators, and value that then displays a result.

Review Questions

1. The arthmetic operators in this expmple are int a, int b, and int result. T/F
2. _______ symbols that performs mathematical operations.
3. Multiplication takes places before addition operators. T/F

Answer Key
1.F 2. Arthmetic operators 3.T



____________________________________________________________________________________________________________________________________________
#include <iostream> 
using namespace std;

// Declare the variables 
int main () {

int number1;
int number2;
int product;

number1= 9;
number2= 3;

// Input statements 

cout << “Enter the first number:” << endl;
cin << number1;

cout << “Enter the second number:” << endl;
cin << number2;

// Assignment Statement

product = number1 * number2;

// Output Statement

cout << “The product of” << “number1” << and << “number2” << “is” << product << endl;

return 0;
}

The variable declared in this example is number1, number 2, and product. This tells the program the values of the data types.

The input statement cin was used to identify the first and second number of the program and it stores that information within the variable .

The assignment statement is used to create the calculation of the product of the two numbers.

The cout statement is used to display on screen the product result of the two numbers that were input. 



Review Questions


1. What is the significance of the assignment statement?
    A. Manipulate data.
    B. Sore variables within data.
    C. Both A and B.
    D. None of the above.

2.Declaring variables is crucial to running a program without any errors? T/F 

3. When ending a C++ program you must add the ____________ to ensure it will run properly.


Answer Key:
1.c 2.T 3. return statement/ return 0;
____________________________________________________________________________________________________________________________________________
Type Conversation in simplest form is automatically done by the compilar, it allows the conversion of one data type to the other. On the other hand
type casting is done manually by the programmer, they are essential allowing the conversion of one data type to the other. Both extremely important to data types in a program.

___________________________________________________________________________________________________________________________________________
Summary
Input statements and output statements are vital to C++ programs simply because it allows the communication amongst the user and program itself to display a given result.
Translating to computing language is necessary, without the source program your program will not understand your basic commands. 
When using C++ programming, preprocessors are vital. An example is “#”. #include it is a statement that begins with a symbol.
The compilar job is to make sure the program is ensured to run correctly with the programming language and no syntax error.
Implying an efficient algorithm is important. Identify any problems that may occur along with the solution for each problem.
Create algorithms and c++ language that would solve said problems and every sub problem. .
Structure design is in place to identify and solve any possible errors and also makes it clear for anyone to come back and tweak the software. 
Object-Oriented Programming  is needed in a C++ program because it identifies each object and their interaction. 
Programs must be brought to main memory in order to execute that program.
______________________________________________________________________________________________________________________________________________________________________________

Key Terms 

Programming
  is a process of planning and creating a program. 

Programming language
  a set of rules, symbols, and special words. 

Token
  the smallest individual unit of a programn written in any language 

Data type
  a set of values together with a set of allowed operations 

Integral
  a data type that deals with integers

Floating point
  a data type that deals with decimal numbers

Unary operator
  has only one operand

Binary operator
  has two operands

String
  a sequence of zero or more characters 

Increment operator
  (two plus signs) that increases the value of a variable

Decrement operator 
  (two minus signs) that decreases the value of a variable

Source code
  the file containing the preprocesser directives and the program statemnts 

_____________________________________________________________________________________________________________________________________________
References 

GeeksforGeeks. (2018, October 22). Type conversion in C. https://www.geeksforgeeks.org/type-conversion-in-c/

Type Casting in C++ - javatpoint. (n.d.). www.javatpoint.com. https://www.javatpoint.com/type-casting-in-cpp
________________________________________________________________________________________________________________________________________________

Review Questions 
1.What is the name of the beginning symbol statement?
   A.synax
   B.preprocessors 
   C.algorithms
2. Recognizing every ______ implies that you have an efficient algorithm.
3. It is the Object-Oriented programming’s job to ensure the program runs smoothly. T/F


Answer Key
1.B
2. problem 
3. F
